import { renderListProducts, renderCart } from "./controller.js";
import { CartItem, Product } from "./modelCartItems.js";

const BASE_URL = "https://66d121c662816af9a4f2d21e.mockapi.io/api/v1/product";

var products = [];
let fetchData = async () => {
    let res = await axios({
        url: BASE_URL,
        method: "GET",
    });
    products = res.data.map(item => new Product(
        item.id,
        item.name,
        item.price,
        item.screen,
        item.backCamera,
        item.frontCamera,
        item.img,
        item.desc,
        item.type
    ));
    renderListProducts(products);
    return products;
};

console.log("üöÄ [ products:", products);
fetchData();

var Cart = {};

// H√†m ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
export const addToCart = (productId) => {
    const product = products.find((p) => p.id === productId);
    if (!product) {
        console.error("Product not found!");
        return;
    }

    // Ki·ªÉm tra n·∫øu s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng, tƒÉng s·ªë l∆∞·ª£ng n·∫øu c√≥
    if (Cart[productId]) {
        Cart[productId].quantity += 1;
    } else {
        // Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng d∆∞·ªõi d·∫°ng ƒë·ªëi t∆∞·ª£ng CartItem v·ªõi s·ªë l∆∞·ª£ng ban ƒë·∫ßu l√† 1
        Cart[productId] = new CartItem(
            product.id,
            product.name,
            product.price,
            product.screen,
            product.backCamera,
            product.frontCamera,
            product.img,
            product.desc,
            product.type,
            1 // S·ªë l∆∞·ª£ng ban ƒë·∫ßu l√† 1
        );
    }
    // Th√™m v√†o local storage
    var dataJson = JSON.stringify(Cart);
    console.log("üì¶ [dataJson:", dataJson);
    localStorage.setItem("cartItems_JSON", dataJson);
    // Hi·ªÉn th·ªã gi·ªè h√†ng trong console ƒë·ªÉ ki·ªÉm tra
    console.log("Gi·ªè h√†ng hi·ªán t·∫°i:", Cart);
    // G·ªçi h√†m render ƒë·ªÉ c·∫≠p nh·∫≠t gi·ªè h√†ng tr√™n giao di·ªán
    alert("Th√™m Th√†nh C√¥ng");
    renderCart(Cart);
};

// L·∫•y d·ªØ li·ªáu t·ª´ local storage
var dataJson = localStorage.getItem("cartItems_JSON");
if (dataJson !== null) {
    var savedCart = JSON.parse(dataJson);
    for (const productId in savedCart) {
        const item = savedCart[productId];
        Cart[productId] = new CartItem(
            item.id,
            item.name,
            item.price,
            item.screen,
            item.backCamera,
            item.frontCamera,
            item.img,
            item.desc,
            item.type,
            item.quantity
        );
    }
    // Hi·ªÉn th·ªã gi·ªè h√†ng
    renderCart(Cart);
}

// H√†m l·ªçc s·∫£n ph·∫©m theo lo·∫°i
const filterProducts = async (type) => {
    try {
        const response = await axios.get(BASE_URL);
        const filteredProducts = response.data
            .map(item => new Product(
                item.id,
                item.name,
                item.price,
                item.screen,
                item.backCamera,
                item.frontCamera,
                item.img,
                item.desc,
                item.type
            ))
            .filter((product) => product.type.toLowerCase() === type.toLowerCase());
        renderListProducts(filteredProducts);
    } catch (error) {
        console.error("Error filtering products:", error);
    }
};

// G√°n s·ª± ki·ªán click cho n√∫t t√¨m ki·∫øm
document.getElementById("search").addEventListener("click", () => {
    const type = document.getElementById("selLoai").value;
    console.log("üöÄ [ type:", type);
    if (type !== "all") {
        filterProducts(type);
    } else {
        renderListProducts(products); // Hi·ªÉn th·ªã t·∫•t c·∫£ s·∫£n ph·∫©m n·∫øu ch·ªçn "all"
    }
});

// H√†m x√≥a item trong cart
export const deleteItem = (itemID) => {
    delete Cart[itemID];
    var dataJson = JSON.stringify(Cart);
    localStorage.setItem("cartItems_JSON", dataJson);
    renderCart(Cart);
};

// TƒÉng s·ªë l∆∞·ª£ng
export const increaseQuantity = (itemID) => {
    console.log(`TƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m v·ªõi ID: ${itemID}`);
    Cart[itemID].quantity = Cart[itemID].quantity + 1;
    // Th√™m v√†o local storage
    var dataJson = JSON.stringify(Cart);
    console.log("üì¶ [dataJson:", dataJson);
    localStorage.setItem("cartItems_JSON", dataJson);
    renderCart(Cart);
};

// Gi·∫£m s·ªë l∆∞·ª£ng
export const decreaseQuantity = (itemID) => {
    console.log(`Gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m v·ªõi ID: ${itemID}`);
    Cart[itemID].quantity = Cart[itemID].quantity - 1;
    if (Cart[itemID].quantity <= 0) {
        deleteItem(itemID);
    }
    // Th√™m v√†o local storage
    var dataJson = JSON.stringify(Cart);
    console.log("üì¶ [dataJson:", dataJson);
    localStorage.setItem("cartItems_JSON", dataJson);
    renderCart(Cart);
};

// L√†m r·ªóng gi·ªè h√†ng
let emptyCart = () => {
    Cart = {};
    var dataJson = JSON.stringify(Cart);
    console.log("üì¶ [dataJson:", dataJson);
    localStorage.setItem("cartItems_JSON", dataJson);
    alert("ƒê√£ L√†m Tr·ªëng Gi·ªè H√†ng");
    renderCart(Cart);
};

// L√†m r·ªóng gi·ªè h√†ng b·∫±ng thanh to√°n
let checkout = () => {
    Cart = {};
    var dataJson = JSON.stringify(Cart);
    console.log("üì¶ [dataJson:", dataJson);
    localStorage.setItem("cartItems_JSON", dataJson);
    alert("Thanh To√°n Th√†nh C√¥ng");
    renderCart(Cart);
};

document.getElementById("emptyCart").addEventListener("click", () => emptyCart());
document.getElementById("checkout").addEventListener("click", () => checkout());
